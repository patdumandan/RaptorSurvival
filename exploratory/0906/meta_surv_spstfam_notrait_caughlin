#final model: beta binomial###########
#non-centered parameterization

#use subset of data in Newton database
#fixed effects: mass, type of estimate (direct/indirect survival based on methods used)
#allowed intercept to vary per species, family and study 
#allowed slopes to vary per family for each trait (mass, diet, foraging strategy)

#run parallel chains
require(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)

#data#
surv=read.csv(file.choose(), h=T)
str(surv)
plot(surv$survival.est~surv$Average.mass..kg.)

#standardize data
surv$mass=(surv$Average.mass..kg.-mean(surv$Average.mass..kg.))/(2*sd(surv$Average.mass..kg.))
surv$forage=(surv$ForStrat.ground-mean(surv$ForStrat.ground))/(2*sd(surv$ForStrat.ground))
surv$diet=(surv$Diet.Inv-mean(surv$Diet.Inv))/(2*sd(surv$Diet.Inv))
surv$est.type<-ifelse(surv$death.type=="direct", 0, 1) #apparent (1) /true (0) survival estimate
surv$estimate=(surv$est.type-mean(surv$est.type))/(2*sd(surv$est.type))
str(surv)

surv<-surv[which(surv$EnglishName!="Andean Condor"),]

#other input data

dat_list_train<-vector("list",length=length(unique(surv$Species)))

dat_list_test<-vector("list",length=length(unique(surv$Species)))

for(i in 1:length(unique(surv$Species))){

surv_sub<-subset(surv,surv$Species!=unique(surv$Species)[i])
surv_out<-subset(surv,surv$Species==unique(surv$Species)[i])


dat_list_train[[i]]=list(
#training data
N=length(surv_sub$Species), y=surv_sub$estimated.survived, n=surv_sub$sample.size,
             diet=surv_sub$diet, forage=surv_sub$forage,
             mass=surv_sub$mass, death_type=surv_sub$estimate,
             species=surv_sub$spcode,family=surv_sub$famcode, study=surv_sub$stcode,
             Nfam=length(unique(surv_sub$family)), Nst=length(unique(surv_sub$Reference)), Nsp=length(unique(surv_sub$Species)),
             
#test data             
N_test=length(surv_sub$Species), n_test=surv_sub$sample.size,
             diet_test=surv_sub$diet, forage_test=surv_sub$forage,
             mass_test=surv_sub$mass, death_type_test=surv_sub$estimate,
             species_test=surv_sub$spcode,family_test=surv_sub$famcode, 
             study_test=surv_sub$stcode,Nfam_test=length(unique(surv_sub$family)),Nst_test=length(unique(surv_sub$Reference)), Nsp_test=length(unique(surv_sub$Species))
           
                   )

}


data=list(N=length(surv$Species), y=surv$estimated.survived, n=surv$sample.size,
             diet=surv$diet, forage=surv$forage,
             mass=surv$mass, death_type=surv$estimate,
             species=surv$spcode,family=surv$famcode, study=surv$stcode,
             Nfam=6, Nst=65, Nsp=37)

N=length(surv$Species) #no.of rows
surv$spcode=as.integer(surv$EnglishName)
surv$stcode=as.integer(surv$Reference)
surv$famcode=as.integer(surv$family)
Nsp=37 #no.of species
Nst=65 #no of studies
Nfam=6 #no of families


surv_mod_notrait_spstfam_fin=stan(model_code="

 data{

  int<lower=0> N; // no.of obs
  int <lower=0> y[N];       // survivors
  int <lower=0>  n[N];       // total 
  vector [N] mass;// ave.mass in kg
//  vector [N] diet; //invertebrate diet
//  vector [N] forage; //ground foraging strategy
  int species[N]; //ID of each species
  int family [N]; //ID of family
  int study [N]; //ID of study
  int Nsp; //no.of species
  int Nst; //no.of studies
  int Nfam;// no. of families
  vector[N] death_type;// direct/indirect

//test data

  int<lower=0> N_test; // no.of obs
  int <lower=0>  n_test[N];       // total 
  vector [N_test] mass_test;// ave.mass in kg
//  vector [N_test] diet_test; //invertebrate diet
//  vector [N_test] forage_test; //ground foraging strategy
  int species_test[N_test]; //ID of each species
  int family_test [N_test]; //ID of family
  int study_test [N_test]; //ID of study
  int Nsp_test; //no.of species
  int Nst_test; //no.of studies
  int Nfam_test;// no. of families
  vector[N_test] death_type_test;// direct/indirect

 }
                
 parameters {

  real alpha;// global intercept
  real mass_eff; //slope mass
  real est_eff; //slope indirect effect
//  real diet_eff;//slope diet
//  real for_eff;// slope foraging strat
  real<lower=0> sigma_sp[Nsp];//errors for random effects
  real<lower=0> sigma_st[Nst];//errors for random effects
  real<lower=0> sigma_fam[Nfam];//errors for random effects
  real <lower=0> phi;
  real <lower=0, upper=1> pred_surv[N] ;//survival per observation
  real <lower=0, upper=1> pred_surv_test[N_test];
              }
   
     
   transformed parameters{
  vector <lower=0, upper=1> [N] surv_mu; //mean estimated survival 
  vector <lower=0> [N] A;
  vector <lower=0> [N] B;
  vector [Nsp] alpha_sp; //random intercept per species
  vector [Nst] alpha_st;// random intercept per study
  vector [Nfam] alpha_fam;// random intercept per family
  //vector [Nfam] mass_fam; //random slope per family for mass effect
  //vector [Nfam] diet_fam;//random slope per family for diet effect
  //vector [Nfam] for_fam;//random slope per family for foraging effect
  
  for (j in 1:Nsp) {
  
  alpha_sp[j]= alpha+phi*sigma_sp[j];
  }

   for (k in 1:Nst) {
  
  alpha_st[k]= alpha+phi*sigma_st[k];
   }
 
   for (m in 1:Nfam) {
  
 alpha_fam[m]= alpha+phi*sigma_fam[m];
 // mass_fam[m]=mass_eff+phi*sigma_fam[m];
  //diet_fam[m]=diet_eff+phi*sigma_fam[m];
  //for_fam[m]=mass_eff+phi*sigma_fam[m];
  }
 
  
  //model:
  
  for (i in 1:N){
  
  surv_mu[i]= inv_logit(alpha_sp[species[i]]+alpha_st[study[i]]+alpha_fam[family[i]]+
  mass_eff*mass[i]+est_eff*death_type[i]);
  //+diet_eff*diet[i]+for_eff*forage[i]);
 // mass_fam[family[i]]+diet_fam[family[i]]+for_fam[family[i]]);
  }
  
  A = surv_mu * phi;
  B = (1 - surv_mu)* phi;
  
  }

 model {
  //priors

  mass_eff~ normal (0.1,1);
  est_eff~ normal (0,1);
  //diet_eff~normal(0,1);
  //for_eff~normal(0,1);
  sigma_sp~ normal(0,1);
  sigma_st~ normal(0,1);
  sigma_fam~ normal(0,1);
  
  phi ~normal(7,1);// use info. from beta regression of all juv and adult
  
  //model likelihood:
  
  pred_surv ~ beta(A, B); // survival estimate, beta dist.
  y~binomial(n, pred_surv); //no.of survivors drawn from binomial dist; based on sample size and reported survival estimate
 
  }

generated quantities {
  
    vector <lower=0, upper=1> [N_test] surv_mu_test;
   vector <lower=0> [N_test] A_test;
  vector <lower=0> [N_test] B_test;
   real pred_y_test [N_test];//predictions on survival
 int<lower=0> y_test[N_test]; //predictions on data level
 
  for (ii in 1:N_test){
  
  surv_mu_test[ii]= inv_logit(alpha_fam[family_test[ii]]+
  mass_eff*mass_test[ii]+est_eff*death_type_test[ii]);
  //+diet_eff*diet_test[ii]+for_eff*forage_test[ii]);
 // mass_fam[family_test[ii]]+diet_fam[family_test[ii]]+for_fam[family_test[ii]]);
  }
  
  A_test = surv_mu_test * phi;
  B_test = (1 - surv_mu_test)* phi;
  
    pred_y_test = beta_rng(A_test, B_test);
    y_test= binomial_rng(n_test, pred_y_test); 
}", 
data=dat_list_train[[i]], chains=4, iter=3000) # , warmup=1000, control=list(adapt_delta=0.99, max_treedepth=12))
#
saveRDS(surv_mod_notrait_spstfam_fin, file="meta_survival_spstfam_notrait.RDS")
post=rstan::extract(surv_mod_notrait_spstfam_fin)$pred_y #predicted survival estimate
print(surv_mod_notrait_spstfam_fin, pars=c("alpha", "mass_eff", "alpha_fam"))

#model output visualization
logq=rstan::extract(surv_mod_notrait_spstfam_fin)$log_lik
rstan::loo(logq)
matplot(surv$Average.mass..kg.,t(post), type="l", col="grey", xlab="average mass (g)", ylab="survival estimate", ylim=c(0.0,1.0))
points(surv$survival.est~surv$Average.mass..kg., col="black", pch=19)


#sample predictions for species:alpha+mass_eff+est_eff+diet_eff+for_eff+alpha_sp
plogis(-2.7+0.02+-0.06+0.01+-0.11+1.05)

#sample predictions for family:alpha+mass_eff+est_eff+diet_eff+for_eff+alpha_fam
plogis(-2.7+0.02+-0.06+0.01+-0.11+0.28)
