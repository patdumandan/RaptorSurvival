#beta binomial###########
#use subset of data in Newton database
#fixed effects: mass, type of estimate (direct/indirect survival based on methods used)
#species and study as random effect
#issue: low ESS

#run paralle chains
mc.cores = parallel::detectCores()

#data#######
surv=read.csv(file.choose(), h=T)
str(surv)
plot(surv$survival.est~surv$Average.mass..kg.)

#rename data#######

N=length(surv$Species) #no.of rows
n=surv$N #sample size
survival=surv$survival.est
mass=surv$Average.mass..kg.
species=surv$spcode
surv$spcode=as.integer(surv$Species)
surv$stcode=as.integer(surv$Reference)
Nsp=36 #no.of species
death_type=as.integer(surv$death.type)
study=surv$Reference
Nst=65 #no of studies
y=surv$total.survived #survivors, mostly estimated from sample size

surv_mod7=stan(model_code="

 data{

  int<lower=0> N; // no.of obs
  int<lower=0> y[N];       // survivors
  int<lower=0> n[N];       // total 
  real <lower=0> mass[N];// ave.mass in kg
  int species[N]; //ID of each species
  int study [N]; //ID of study
  int Nsp; //no.of species
  int Nst; //no.of studies
  int death_type[N];// direct/indirect

                }
 parameters {

  real <lower=0> alpha;// global intercept
  real <lower=0> alpha_sp[Nsp]; //random intercept per species
  real <lower=0> alpha_st [Nst];// random intercept per study
  real <lower=0> beta1; //slope age
  real <lower=0> beta2; //slope indirect effect
  real<lower=0> sigma_sp;//errors for random effects
   real<lower=0> sigma_st;//errors for random effects
  real <lower=0> phi;
  real <lower=0, upper=1> pred_surv;
              }
   
     
   transformed parameters{
  vector <lower=0, upper=1> [N] surv_mu; //estimated survival 
  vector <lower=0> [N] A;
  vector <lower=0> [N] B;
  
  for (i in 1:N){
  
  surv_mu[i]= inv_logit(alpha+beta1*mass[i]+beta2*death_type[i]+alpha_sp[Nsp]+alpha_st[Nst]);
  }
  
  A = surv_mu * phi;
  B = (1 - surv_mu )* phi;// look into this, if phi is not=1, relationship not hold
  
  }
  
  

 model {
  //priors
  
  alpha~ normal (0,1);
  beta1~ normal (0,1);
  beta2~ normal (0,1);
  sigma_sp ~normal(0,1);
  sigma_st~ normal(0,1);
  phi ~normal(7,1);// use info. from beta regression of all 
  
  pred_surv ~ beta(A, B); // survival estimate, beta dist.
  y~binomial(n, pred_surv); //no. of survivors, no.of survivors drawn from binomial dist; based on sample size and number of survivors

for(j in 1:Nsp){
           alpha_sp[j]~normal(0, sigma_sp);
  }
  
  for (f in 1: Nst){
  
          alpha_st[f]~normal(0, sigma_st);
  }
  }

generated quantities {
  
  real log_y [N];//predictions on survival
  

    log_y = beta_rng(A, B);
   
  }
", data=list(N=N, y=y, n=n, mass=mass, death_type=death_type,
 species=species,study=surv$stcode, Nst=65, Nsp=36), chains=4, iter=3000, warmup=1000, control=list(adapt_delta=0.99, max_treedepth=12))



#model diagnostics
saveRDS(surv_mod7, file="surv_betabinom_raneff_1phi.RDS")
post7=rstan::extract(surv_mod7)$log_y #predicted survival estimate
mean(post7) #0.77 if 10phi and 100phi, 0.76 if 2.5 phi; 0.75 if 1phi
mean(surv$survival.est) #0.75

#model output visualization
matplot(surv$Average.mass..kg.,t(post7), type="l", col="grey", xlab="average mass(kg)", ylab="survival estimate", ylim=c(0.2,1.0))
points(surv$survival.est~surv$Average.mass..kg., col="black", lwd=2, pch=16)
mpost7=apply(post7,2,mean)
lines(mpost7~surv$Average.mass..kg.,col="white", lwd=2)
